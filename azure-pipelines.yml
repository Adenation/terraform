# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourcegroup: "tf-lab"
  storageacc: "adentfstorage"
  stcontainer: "landing"
  storagekey: "devpipeline.terraform.tfstate"

stages:
  - stage: tfapply
    jobs:
      - job: create
        continueOnError: false
        steps:
          - task: PowerShell@2
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                # Install Terraform
                $url = "https://releases.hashicorp.com/terraform/1.0.9/terraform_1.0.9_linux_amd64.zip"
                $zipFile = "$env:TEMP/terraform.zip"
                $installDir = "$env:AGENT_TOOLSDIRECTORY/Terraform/1.0.9/x64"
                
                Invoke-WebRequest -Uri $url -OutFile $zipFile
                Expand-Archive -Path $zipFile -DestinationPath $installDir
                
                # Add Terraform to the PATH
                $env:PATH += ";$installDir"
                
                # Verify Terraform installation
                terraform --version
              
          - task: PowerShell@2
            displayName: 'Terraform Init'
            inputs:
              targetType: 'inline'
              script: |
                cd $(System.DefaultWorkingDirectory)
                terraform init -backend-config="resource_group_name=$(resourcegroup)" -backend-config="storage_account_name=$(storageacc)" -backend-config="container_name=$(stcontainer)" -backend-config="key=$(storagekey)"
              
          - task: PowerShell@2
            displayName: 'Terraform Validate'
            inputs:
              targetType: 'inline'
              script: |
                cd $(System.DefaultWorkingDirectory)
                terraform validate
              
          - task: PowerShell@2
            displayName: 'Terraform Plan'
            inputs:
              targetType: 'inline'
              script: |
                cd $(System.DefaultWorkingDirectory)
                terraform plan -out=tfplan -input=false
              
          - task: PowerShell@2
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              script: |
                cd $(System.DefaultWorkingDirectory)
                terraform apply -input=false -auto-approve tfplan


